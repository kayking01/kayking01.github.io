<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Difory</title>
    <link>http://example.com/</link>
    
    <image>
      <url>http://example.com/icon.png</url>
      <title>Difory</title>
      <link>http://example.com/</link>
    </image>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>1</description>
    <pubDate>Thu, 17 Oct 2024 02:34:50 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>HEXO博客搭建</title>
      <link>http://example.com/2024/10/17/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <guid>http://example.com/2024/10/17/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <pubDate>Wed, 16 Oct 2024 16:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;HEXO&quot;&gt;&lt;a href=&quot;#HEXO&quot; class=&quot;headerlink&quot; title=&quot;HEXO&quot;&gt;&lt;/a&gt;HEXO&lt;/h1&gt;&lt;h2 id=&quot;一、环境配置&quot;&gt;&lt;a href=&quot;#一、环境配置&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><h3 id="1-基础服务"><a href="#1-基础服务" class="headerlink" title="1.基础服务"></a>1.基础服务</h3><blockquote><p>服务器环境：Centos9、yum</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum install node</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增文件夹 博客目录</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建空文件夹 执行 hexo init blog 文件 复制到 原来的文件夹里</span></span><br><span class="line">mkdir blog</span><br><span class="line"></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动本地服务器</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用简写</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="2-1-创建文章"><a href="#2-1-创建文章" class="headerlink" title="2.1 创建文章"></a>2.1 创建文章</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一篇新文章</span></span><br><span class="line">hexo new &quot;主页&quot;</span><br></pre></td></tr></table></figure><h4 id="2-2-主题"><a href="#2-2-主题" class="headerlink" title="2.2 主题"></a>2.2 主题</h4><p>选择一个 Hexo 主题，例如 Ayer。安装并应用到你的 Hexo 博客。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Ayer 主题</span></span><br><span class="line">npm install hexo-theme-ayer --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者对于 Hexo 版本低于 5.0</span></span><br><span class="line">git clone https://gitee.com/mirrors/ayer.git themes/ayer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 _config.yml 中设置主题</span></span><br><span class="line">theme: ayer</span><br></pre></td></tr></table></figure><p><strong>自定义主题</strong></p><p>根据你选择的主题，编辑主题的配置文件来自定义你的博客。例如，Ayer 主题的配置文件通常位于 <code>themes/ayer/_config.yml</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开主题配置文件进行自定义</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">themes/ayer/_config.yml</span></span><br></pre></td></tr></table></figure><p>配置参考</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="string">旅行:</span> <span class="string">/tags/旅行/</span></span><br><span class="line">  <span class="string">壁纸:</span> <span class="string">https://wallpaper.seenav.cn/</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/friends</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/2022/01/01/关于我/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点次标题和打字动效</span></span><br><span class="line"><span class="comment"># https://github.com/mattboldt/typed.js</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启动效</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">面朝大海，春暖花开</span> <span class="comment"># 显示的文字</span></span><br><span class="line">  <span class="attr">text2:</span> <span class="string">一生努力，一生被爱</span> <span class="comment"># 滚动播放，如果不需要可以留空</span></span><br><span class="line">  <span class="attr">text3:</span> <span class="string">想要的都拥有，得不到的都释怀</span> <span class="comment"># 最多支持三段文字</span></span><br><span class="line">  <span class="attr">startDelay:</span> <span class="number">0</span> <span class="comment"># 延迟时间</span></span><br><span class="line">  <span class="attr">typeSpeed:</span> <span class="number">200</span> <span class="comment"># 打字速度</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span> <span class="comment"># 是否循环</span></span><br><span class="line">  <span class="attr">backSpeed:</span> <span class="number">100</span> <span class="comment"># 回退速度</span></span><br><span class="line">  <span class="attr">showCursor:</span> <span class="literal">true</span> <span class="comment"># 是否显示光标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标和侧边栏logo</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/blog/favicon.ico</span></span><br><span class="line"><span class="attr">logo:</span> <span class="string">/blog/images/ayer.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封面配置</span></span><br><span class="line"><span class="comment"># enable-是否启用封面；path-封面背景图；logo-封面logo</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/blog/images/cover1.jpg</span> <span class="comment"># /source/images目录下附送多张美图，可更换</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="literal">false</span> <span class="comment">#/images/ayer.svg，如果不要直接设置成false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面顶部进度条</span></span><br><span class="line"><span class="attr">progressBar:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 告示板模块</span></span><br><span class="line"><span class="attr">broadcast:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># true开启，false关闭</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">2</span> <span class="comment"># 1：自定义输入，2：一言api(https://hitokoto.cn/)</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">一个安静优雅的hexo主题，快速且响应式。</span> <span class="comment"># type为1时有效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章配置</span></span><br><span class="line"><span class="comment"># 文章太长，截断按钮文字(在需要截断的行增加此标记：&lt;!--more--&gt;)</span></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读更多...</span></span><br><span class="line"><span class="comment"># 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档</span></span><br><span class="line"><span class="attr">excerpt_all:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启代码复制按钮</span></span><br><span class="line"><span class="attr">copy_btn:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否开启文章分享按钮</span></span><br><span class="line"><span class="attr">share_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 国内的社交平台(If you are not in China, maybe you prefer to set:false)</span></span><br><span class="line"><span class="attr">share_china:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 文章分享文字</span></span><br><span class="line"><span class="attr">share_text:</span> <span class="string">分享</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页文字</span></span><br><span class="line"><span class="attr">nav_text:</span></span><br><span class="line">  <span class="attr">page_prev:</span> <span class="string">上一页</span></span><br><span class="line">  <span class="attr">page_next:</span> <span class="string">下一页</span></span><br><span class="line">  <span class="attr">post_prev:</span> <span class="string">上一篇</span></span><br><span class="line">  <span class="attr">post_next:</span> <span class="string">下一篇</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章页是否显示目录</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章中的图片是否支持点击放大</span></span><br><span class="line"><span class="attr">image_viewer:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="comment"># 是否开启字数统计(关闭请设置enable为false)</span></span><br><span class="line"><span class="comment"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span></span><br><span class="line"><span class="attr">word_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 只在文章详情显示(不在首页显示)</span></span><br><span class="line">  <span class="attr">only_article_visit:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span></span><br><span class="line"><span class="attr">reward_type:</span> <span class="number">2</span></span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line"><span class="attr">reward_wording:</span> <span class="string">&quot;请我喝杯奶茶吧~&quot;</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg</span></span><br><span class="line"><span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span></span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line"><span class="attr">weixin:</span> <span class="string">/images/wechat.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="comment"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class="line"><span class="attr">copyright_type:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用搜索</span></span><br><span class="line"><span class="comment"># 需要安装hexo-generator-searchdb(https://github.com/theme-next/hexo-generator-searchdb)</span></span><br><span class="line"><span class="attr">search:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)</span></span><br><span class="line"><span class="comment"># 不想显示可以直接留空</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用黑夜模式开关</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态背景效果: 0-关闭，1-动态线条(跟随鼠标)</span></span><br><span class="line"><span class="attr">canvas_bg:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义鼠标样式，直接替换/images/mouse.cur文件</span></span><br><span class="line"><span class="attr">mouse:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/blog/images/mouse.cur</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标点击效果：0-关闭，1-爱心，2-爆炸烟花，3-粒子烟花</span></span><br><span class="line"><span class="attr">click_effect:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度</span></span><br><span class="line"><span class="attr">layout:</span></span><br><span class="line">  <span class="attr">article_width:</span> <span class="string">80rem</span></span><br><span class="line">  <span class="attr">sidebar_width:</span> <span class="string">8rem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片</span></span><br><span class="line"><span class="attr">github:</span></span><br><span class="line">  <span class="comment"># (关闭请设置为false)</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://gitee.com/bestwishes0203</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 播放器尺寸类型(1：小尺寸、2：大尺寸)</span></span><br><span class="line">  <span class="attr">type:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">1497588709</span> <span class="comment"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class="line">  <span class="attr">autoPlay:</span> <span class="literal">false</span> <span class="comment"># 是否开启自动播放</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问量统计(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class="line"><span class="attr">cnzz:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://s9.cnzz.com/z_stat.php?id=1278069914&amp;web_id=1278069914</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># 百度统计</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mathjax数学公式</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)</span></span><br><span class="line"><span class="comment"># 需要更换hexo渲染器，npm un hexo-renderer-marked -S &amp;&amp; npm i hexo-renderer-markdown-it-katex -S</span></span><br><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  <span class="attr">allpost:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mermaid流程图 三个选项缺一不可(https://mermaid-js.github.io/mermaid/)</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">https://cdn.staticfile.org/mermaid/8.14.0/mermaid.min.js</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">forest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ICP备案信息尾部显示</span></span><br><span class="line"><span class="attr">icp:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">&quot;https://beian.miit.gov.cn/&quot;</span> <span class="comment"># 备案链接</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">&quot;浙ICP备88888888&quot;</span> <span class="comment"># 备案信息</span></span><br><span class="line"><span class="comment"># 公安备案信息尾部显示</span></span><br><span class="line"><span class="attr">gongan:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/images/beian.png</span> <span class="comment">#公安备案图片</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">&quot;http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=01234567890123&quot;</span> <span class="comment">#公安备案链接</span></span><br><span class="line">  <span class="attr">text:</span> <span class="string">&quot;浙公网安备01234567890123号&quot;</span> <span class="comment">#公安备案信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友情链接</span></span><br><span class="line"><span class="attr">friends_link:</span></span><br><span class="line">  <span class="comment"># Ayer主题: #网站名称</span></span><br><span class="line">  <span class="comment">#   #网站地址</span></span><br><span class="line">  <span class="comment">#   url: https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class="line">  <span class="comment">#   #网站图片(可忽略不写)</span></span><br><span class="line">  <span class="comment">#   img: /images/ayer.png</span></span><br><span class="line">  <span class="string">Hexo官网:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://hexo.io</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">/images/hexo.png</span></span><br><span class="line">  <span class="string">Hexo图表插件:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-tag-chart</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">/images/hexo-tag-chart.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评论：1、Valine(推荐)；2、Gitalk；3、Twikoo;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)</span></span><br><span class="line"><span class="comment"># 启用Valine必须先创建leancloud应用， 获取 id|key 填入即可</span></span><br><span class="line"><span class="attr">leancloud:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment">#</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment">#</span></span><br><span class="line"><span class="comment"># Valine配置</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">给我的文章加点评论吧~</span> <span class="comment"># placeholder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、Gitalk(https://github.com/gitalk/gitalk)</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  <span class="attr">clientID:</span> <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  <span class="attr">clientSecret:</span> <span class="comment"># Client Secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># Repository name</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="comment"># GitHub ID</span></span><br><span class="line">  <span class="attr">admin:</span> <span class="comment"># GitHub ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、Twikoo(https://github.com/imaegoo/twikoo)</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页广告配置</span></span><br><span class="line"><span class="comment"># 可以根据需要自行增加ad_3，ad_4...，留空则不显示，建议图片和url不要带ad等关键词，否则可能会被adblock等插件屏蔽</span></span><br><span class="line"><span class="comment"># ads:</span></span><br><span class="line"><span class="comment">#   ad_1:</span></span><br><span class="line"><span class="comment">#     title: 云服务器限时秒杀</span></span><br><span class="line"><span class="comment">#     img: https://pic.imgdb.cn/item/62174b452ab3f51d912a5ccc.jpg</span></span><br><span class="line"><span class="comment">#     url: https://curl.qcloud.com/kvO7hb43</span></span><br><span class="line"><span class="comment">#     width: 300</span></span><br><span class="line"><span class="comment">#   ad_2:</span></span><br><span class="line"><span class="comment">#     title: vultr优惠vps</span></span><br><span class="line"><span class="comment">#     img: https://pic.imgdb.cn/item/62174b452ab3f51d912a5cd7.png</span></span><br><span class="line"><span class="comment">#     url: https://www.vultr.com/?ref=8630075</span></span><br><span class="line"><span class="comment">#     width: 300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站开启加密访问，密码可设置任何字符</span></span><br><span class="line"><span class="attr">lock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>这里还可以替换博客<code>themes</code>文件夹下的静态文件来美化自己的博客。</p><h3 id="3-部署Gitee"><a href="#3-部署Gitee" class="headerlink" title="3.部署Gitee"></a>3.部署Gitee</h3><p>在 <code>_config.yml</code> 文件中配置 Gitee 仓库信息，并部署博客。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################   准备工作   ######################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 Git 用户名和邮箱</span></span><br><span class="line">git config --global user.name &quot;your-gitee-username&quot;</span><br><span class="line">git config --global user.email &quot;your-email@example.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 SSH 密钥</span></span><br><span class="line">ssh-keygen -t ed25519 -C &quot;Gitee SSH Key&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 SSH 公钥到 Gitee 账户</span></span><br><span class="line">cat ~/.ssh/id_ed25519.pub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 SSH 连接</span></span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Hexo 部署插件（安装一次即可）</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##############################   部署    ######################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成博客内容</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动本地服务器预览博客（可选）</span></span><br><span class="line">hexo server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简写</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署博客</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如何生成 SSH 密钥： <a href="https://help.gitee.com/base/account/SSH%E5%85%AC%E9%92%A5%E8%AE%BE%E7%BD%AE">生成 SSH 密钥</a></p><p>确保将 <code>your-gitee-username</code> 和 <code>your-repo</code> 替换为你在 Gitee 上的用户名和仓库名。</p><p>如果部署不上去可能是博客跟目录下的 <code>_congif.yml</code> 中<code>deploy&gt;repo</code>没有修改为自己的地址。</p><p>最后,在Gitee仓库中开启 <code>Gitee Pages</code> 服务并且更新内容。</p><p>添加或修改博客内容之后，重复 <code>步骤8</code> 即可更新到线上。</p><h3 id="4-虚拟机-文件夹-共享"><a href="#4-虚拟机-文件夹-共享" class="headerlink" title="4. 虚拟机 文件夹 共享"></a>4. 虚拟机 文件夹 共享</h3><blockquote><p>本来打算在虚拟机里搭建环境，后来想了想还是本地方便，所以这个环节可以跳过。。</p></blockquote><h4 id="4-1-创建共享文件夹"><a href="#4-1-创建共享文件夹" class="headerlink" title="4.1 创建共享文件夹"></a>4.1 创建共享文件夹</h4><p>vmware上点击设置，进入虚拟机设置，点击选项，共享文件夹，选择总是启动，添加</p><p>主机路径，物理机上要分享的文件夹路径，这里我设置为 <code>D:\test_shared</code></p><p>名称，要在虚拟机上显示的名称,，这里我设置为 <code>VM-centos-share</code></p><p>打开CentOS终端，输入命令，查看共享文件夹情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-hgfsclient</span><br></pre></td></tr></table></figure><h4 id="4-2-挂载共享目录"><a href="#4-2-挂载共享目录" class="headerlink" title="4.2 挂载共享目录"></a>4.2 挂载共享目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">gedit  /etc/fstab </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾上加上</span></span><br><span class="line">.host:/VM-centos-share /mnt/hgfs fuse.vmhgfs-fuse allow_other,defaults 0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中 VM-centos-share 是共享文件夹的名字 /mnt/hgfs 是centos中的路径</span></span><br></pre></td></tr></table></figure><p>保存重启即可</p><p>如果centos系统因权限无法查看共享文件夹内容，修改权限，777为最高权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 /mnt/hgfs</span><br></pre></td></tr></table></figure><h3 id="5-网站评论系统-Twikoo"><a href="#5-网站评论系统-Twikoo" class="headerlink" title="5.网站评论系统 Twikoo"></a>5.网站评论系统 Twikoo</h3><p><a href="https://twikoo.js.org/">https://twikoo.js.org/</a></p><h4 id="5-1-MongoDB-Atlas"><a href="#5-1-MongoDB-Atlas" class="headerlink" title="5.1 MongoDB Atlas"></a>5.1 MongoDB Atlas</h4><p>MongoDB Atlas 是 MongoDB Inc 提供的 MongoDB 数据库托管服务。免费账户可以永久使用 500 MiB 的数据库，足够存储 Twikoo 评论使用。</p><ol><li><p>创建免费 MongoDB 数据库，区域推荐选择离 Twikoo 后端（Vercel &#x2F; Netlify &#x2F; AWS Lambda &#x2F; VPS）地理位置较近的数据中心以获得更低的数据库连接延迟。如果不清楚自己的后端在哪个区域，也可选择 <code>AWS / Oregon (us-west-2)</code>，该数据中心基建成熟，故障率低，且使用 Oregon 州的清洁能源，较为环保。</p><p><img src="/images/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20241016201016170.png" alt="image-20241016201016170"></p></li><li><p>在 Database Access 页面点击 Add New Database User 创建数据库用户，Authentication Method 选 Password，在 Password Authentication 下设置数据库用户名和密码，建议点击 Auto Generate 自动生成一个不含特殊符号的强壮密码并妥善保存。点击 Database User Privileges 下方的 Add Built In Role，Select Role 选择 Atlas Admin，最后点击 Add User</p></li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XXXbloXXXXXXX</span><br><span class="line">INjsgzJXXXXXXXXXXX</span><br></pre></td></tr></table></figure><p><img src="/images/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20241016200301861.png" alt="image-20241016200301861"></p><ol start="3"><li>在 Network Access 页面点击 Add IP Address 添加网络白名单。因为 Vercel &#x2F; Netlify &#x2F; Lambda 的出口地址不固定，因此 Access List Entry 输入 <code>0.0.0.0/0</code>（允许所有 IP 地址的连接)即可。如果 Twikoo 部署在自己的服务器上，这里可以填入固定 IP 地址。点击 Confirm 保存</li></ol><p><img src="/images/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20241016200315905.png" alt="image-20241016200315905"></p><ol start="4"><li>在 Database 页面点击 Connect，连接方式选择 Drivers，并记录数据库连接字符串，请将连接字符串中的 <code>&lt;username&gt;:&lt;password&gt;</code> 修改为刚刚创建的数据库 <code>用户名:密码</code> 要手动替换成您设置的密码 ; 填写密码时去掉两侧的尖括号 &lt; &gt;</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb+srv://blog_CVVVVVVVVVVVVVVVVVVVVVVV@blog.znxuq.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=blog</span><br></pre></td></tr></table></figure><ol start="5"><li>（可选）默认的连接字符串没有指定数据库名称，Twikoo 会连接到默认的名为 <code>test</code> 的数据库。如果需要在同一个 MongoDB 里运行其他业务或供多个 Twikoo 实例使用，建立加入数据库名称并配置对应的 ACL。</li></ol><p>连接字符串包含了连接到 MongoDB 数据库的所有信息，一旦泄露会导致评论被任何人添加、修改、删除，并有可能获取你的 SMTP、图床 token 等信息。请妥善记录这一字符串，之后需要填入到 Twikoo 的部署平台里。</p><h4 id="5-2-云函数部署-Vercel-部署"><a href="#5-2-云函数部署-Vercel-部署" class="headerlink" title="5.2 云函数部署 Vercel 部署"></a>5.2 云函数部署 Vercel 部署</h4><ol><li><p>申请 <a href="https://twikoo.js.org/mongodb-atlas.html">MongoDB Atlas</a> 账号，获取 MongoDB 连接字符串</p></li><li><p>申请 <a href="https://vercel.com/signup">Vercel</a> 账号</p></li><li><p>点击以下按钮将 Twikoo 一键部署到 Vercel</p><p><a href="https://vercel.com/import/project?template=https://github.com/twikoojs/twikoo/tree/main/src/server/vercel-min">https://vercel.com/import/project?template=https://github.com/twikoojs/twikoo/tree/main/src/server/vercel-min</a></p></li><li><p>进入 Settings - Environment Variables，添加环境变量 <code>MONGODB_URI</code>，值为前面记录的数据库连接字符串</p></li><li><p>进入 Settings - Deployment Protection，设置 Vercel Authentication 为 Disabled，并 Save</p></li><li><p>进入 Deployments , 然后在任意一项后面点击更多（三个点） , 然后点击 Redeploy , 最后点击下面的 Redeploy</p></li><li><p>进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示</p></li><li><p>Vercel Domains（包含 <code>https://</code> 前缀，例如 <code>https://xxx.vercel.app</code>）即为您的环境 id</p></li></ol><p><img src="/images/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20241016205131796.png" alt="image-20241016205131796"></p><p>url: <strong><a href="https://twikoojsvercelxxxxxxxxxxxxxx.vercel.app/">https://twikoojsvercelXXXXXXXXXXXXXX.vercel.app</a></strong></p><h4 id="5-3-Hexo-配置文件"><a href="#5-3-Hexo-配置文件" class="headerlink" title="5.3 Hexo 配置文件"></a>5.3 Hexo 配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3、Twikoo(https://github.com/imaegoo/twikoo)</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://twikoojsvercel-XXXXXXXXXXXXXXXXXXXX.vercel.app</span></span><br></pre></td></tr></table></figure><p>最终效果：</p><p><img src="/images/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20241016210322342.png" alt="image-20241016210322342"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">博客搭建</category>
      
      
      <category domain="http://example.com/tags/%E5%8D%9A%E5%AE%A2/">博客</category>
      
      <category domain="http://example.com/tags/Twikoo/">Twikoo</category>
      
      
      <comments>http://example.com/2024/10/17/HEXO%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Zookeeper 更新中</title>
      <link>http://example.com/2024/10/16/zookeeper/</link>
      <guid>http://example.com/2024/10/16/zookeeper/</guid>
      <pubDate>Tue, 15 Oct 2024 16:00:00 GMT</pubDate>
      
      <description>这是显示在首页的概述，正文内容均会被隐藏。</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p><strong>ZooKeeper 是一个开源的分布式协调框架</strong>，是Apache Hadoop 的一个子项目，<strong>主要用来解决分布式集群中应用系统的一致性问题</strong>。Zookeeper 的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p><p><strong>ZooKeeper本质上是一个分布式的小文件存储系统（Zookeeper&#x3D;文件系统+监听机制）</strong>。提供基于类似于文件系统的目录树方式的数据存储，并且可以对树中的节点进行有效管理，从而用来维护和监控存储的数据的状态变化。通过监控这些数据状态的变化，从而可以达到<strong>基于数据的集群管理、统一命名服务、分布式配置管理、分布式消息队列、分布式锁、分布式协调等功能。</strong></p><p><img src="/images/zookeeper/image-20241008103345979.png" alt="image-20241008103345979"></p><p>Zookeeper从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应。</p><p><img src="/images/zookeeper/image-20241008103702135.png" alt="image-20241008103702135"></p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>官网：<a href="https://zookeeper.apache.org/">https://zookeeper.apache.org/</a></p><p>安装地址：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><p>指令地址：<a href="https://zookeeper.apache.org/doc/r3.8.0/zookeeperCLI.html">https://zookeeper.apache.org/doc/r3.8.0/zookeeperCLI.html</a></p><h4 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h4><p>解压安装包后进入conf目录，复制zoo_sample.cfg，修改为zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>修改 zoo.cfg 配置文件，将 dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper 修改为指定的data目录</p><p><img src="/images/zookeeper/image-20241008105001526.png" alt="image-20241008105001526"></p><h4 id="2、启动服务"><a href="#2、启动服务" class="headerlink" title="2、启动服务"></a>2、启动服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过 bin/zkServer.sh 来查看都支持哪些参数1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认加载配置路径conf/zoo.cfg2</span></span><br><span class="line"></span><br><span class="line">输入命令 help 查看zookeeper支持的所有命令：</span><br><span class="line">bin/zkServer.sh start</span><br><span class="line">bin/zkServer.sh start conf/my_zoo.cfg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看zookeeper状态</span></span><br><span class="line">bin/zkServer.sh status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###############</span></span></span><br><span class="line">yum install -y  java-1.8.0-openjdk-devel.x86_64</span><br><span class="line"></span><br><span class="line">安装openjdk-devel包</span><br><span class="line">使用 jps 查看所有java虚拟机进程</span><br></pre></td></tr></table></figure><h4 id="3、客户端连接服务"><a href="#3、客户端连接服务" class="headerlink" title="3、客户端连接服务"></a>3、客户端连接服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/zkCli.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接远程的zookeeper server</span></span><br><span class="line">bin/zkCli.sh -server ip:port</span><br></pre></td></tr></table></figure><p>常用cli命令 <a href="https://zookeeper.apache.org/doc/r3.8.0/zookeeperCLI.html">https://zookeeper.apache.org/doc/r3.8.0/zookeeperCLI.html</a></p><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td>help</td><td>显示所有操作命令</td></tr><tr><td>ls [-s] [-w] [-R] path</td><td>使用 ls 命令来查看当前 znode 的子节点 [可监听]<br />-w: 监听子节点变化（一次性的）<br /> -s: 节点状态信息（时间戳、版本号、数据大小等）<br />-R: 表示递归的获取</td></tr><tr><td>create [-s] [-e] [-c] [-t ttl] path [data] [acl]</td><td>创建节点<br/>-s : 创建有序节点。<br/>-e : 创建临时节点。<br/>-c : 创建一个容器节点。<br/>-t ttl : 创建一个TTL节点， -t 时间（单位毫<br/>秒）。<br/>data：节点的数据，可选，如果不使用时，节点<br/>数据就为null。<br/>acl：访问控制</td></tr><tr><td>get [-s] [-w] path</td><td>获取节点数据信息<br/>-s: 节点状态信息（时间戳、版本号、数据大小<br/>等）<br/>-w: 监听节点变化（一次性的）</td></tr><tr><td>set [-s] [-v version] path data</td><td>设置节点数据<br/>-s:表示节点为顺序节点<br/>-v: 指定版本号</td></tr><tr><td>getAcl [-s] path</td><td>获取节点的访问控制信息<br/>-s: 节点状态信息（时间戳、版本号、数据大小<br/>等）</td></tr><tr><td>setAcl [-s] [-v version] [-R] path acl</td><td>设置节点的访问控制列表<br/>-s:节点状态信息（时间戳、版本号、数据大小<br/>等）<br/>-v:指定版本号<br/>-R:递归的设置</td></tr><tr><td>stat [-w] path</td><td>查看节点状态信息</td></tr><tr><td>delete [-v version] path</td><td>删除某一节点，只能删除无子节点的节点。<br/>-v： 表示节点版本号</td></tr><tr><td>deleteall path</td><td>递归的删除某一节点及其子节点</td></tr><tr><td>setquota -n| -b val path</td><td>对节点增加限制<br/>n:表示子节点的最大个数<br/>b:数据值的最大长度，-1表示无限制</td></tr></tbody></table><h4 id="4、GUI工具"><a href="#4、GUI工具" class="headerlink" title="4、GUI工具"></a>4、GUI工具</h4><p>Zookeeper图形化工具：<a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip">ZooInspector</a><br>Zookeeper图形化工具：开源的<a href="https://github.com/vran-dev/PrettyZoo/releases">prettyZoo</a><br>Zookeeper图形化工具：收费的<a href="http://www.redisant.cn/za">ZooKeeperAssistant</a></p><h3 id="三、ZooKeeper数据结构"><a href="#三、ZooKeeper数据结构" class="headerlink" title="三、ZooKeeper数据结构"></a>三、ZooKeeper数据结构</h3><p>ZooKeeper 数据模型的结构与 Unix 文件系统很类似，整体上可以看作是一棵树，每个节点称做一个ZNode。</p><p>ZooKeeper的数据模型是层次模型，层次模型常见于文件系统。层次模型和key-value模型是两种主流的数据模型。ZooKeeper使用文件系统模型主要基于以下两点考虑：</p><ol><li>文件系统的树形结构便于表达数据之间的层次关系。</li><li>文件系统的树形结构便于为不同的应用分配独立的命名空间( namespace )。</li></ol><p>ZooKeeper的层次模型称作Data Tree，Data Tree的每个节点叫作Znode。不同于文件系统，每个节点都可以保存数据，每一个 ZNode 默认能够存储 <strong>1MB</strong> 的数据，每个 ZNode 都可以通过其路径唯一标识，每个节点都有一个版本(version)，版本从0开始计数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, DataNode&gt; nodes =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, DataNode&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">WatchManager</span> <span class="variable">dataWatches</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WatchManager</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">WatchManager</span> <span class="variable">childWatches</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WatchManager</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataNode</span> <span class="keyword">implements</span> <span class="title class_">Record</span> &#123;</span><br><span class="line">    <span class="type">byte</span> data[];</span><br><span class="line">    Long acl;</span><br><span class="line">    <span class="keyword">public</span> StatPersisted stat;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; children = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、节点分类"><a href="#1、节点分类" class="headerlink" title="1、节点分类"></a>1、节点分类</h4><p>zookeeper存在几种不同的节点类型，他们具有不同的生命周期：</p><table><thead><tr><th>类型</th><th>生命周期</th><th>创建示例</th></tr></thead><tbody><tr><td>持久节点 （persistent node)</td><td>一直存在，一直存储在ZooKeeper 服务器上<br/>即使创建该节点的客户端与服务端的会话关闭了，<br/>该节点依然不会被删</td><td>create &#x2F;locks</td></tr><tr><td>临时节点 (ephemeral node）</td><td>当创建该临时节点的客户端会话因超时或发生异常<br />而关闭时，该节点也相应在 ZooKeeper 服务<br/>器上被删除。临时节点无法创建子节点</td><td>create -e &#x2F;locks&#x2F;DBLock</td></tr><tr><td>有序节点 (sequential node)</td><td>并不算是一种单独种类的节点，而是在之前提到的<br />持久节点和临时节点特性的基础上，增加了一个节点有序的性质。<br />在我们创建有序节点的时候会自动使用一个单调递增的数字作为后缀。</td><td>create -e -s &#x2F;jobs&#x2F;job<br />(有序临时节点)</td></tr><tr><td>容器节点 (container node)</td><td>当一个容器节点的最后一个子节<br/>点被删除后，容器节点也会被删<br/>除</td><td>create -c &#x2F;work</td></tr><tr><td>TTL节点 (ttl node)</td><td>当一个TTL节点在 TTL 内没有被<br/>修改并且没有子节点，会被删<br/>除。注意：默认此功能不开启，<br/>需要修改配置文件<br/>extendedTypesEnabled&#x3D;true</td><td>create -t 3000 &#x2F;ttl_node</td></tr></tbody></table><p>一个znode可以使持久性的，也可以是临时性的：</p><ol><li>持久节点(PERSISTENT): 这样的znode在创建之后即使发生ZooKeeper集群宕机或者client宕机<br>也不会丢失。</li><li>临时节点(EPHEMERAL ): client宕机或者client在指定的timeout时间内没有给ZooKeeper集群<br>发消息，这样的znode就会消失。<br>如果上面两种znode具备顺序性，又有以下两种znode :</li><li>持久顺序节点(PERSISTENT_SEQUENTIAL): znode除了具备持久性znode的特点之外，znode<br>的名字具备顺序性。</li><li>临时顺序节点(EPHEMERAL_SEQUENTIAL): znode除了具备临时性znode的特点之外，zorde<br>的名字具备顺序性。<br>zookeeper主要用到的是以上4种节点。</li><li>Container节点 (3.5.3版本新增)：Container容器节点，当容器中没有任何子节点，该容器节点<br>会被zk定期删除（定时任务默认60s 检查一次)。 和持久节点的区别是 ZK 服务端启动后，会有一个单<br>独的线程去扫描，所有的容器节点，当发现容器节点的子节点数量为 0 时，会自动删除该节点。可以<br>用于 leader 或者锁的场景中。</li><li>TTL节点: 带过期时间节点，默认禁用，需要在zoo.cfg中添加 extendedTypesEnabled&#x3D;true 开<br>启。 注意：TTL不能用于临时节点</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建持久节点1</span></span><br><span class="line">create /servers xxx2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建临时节点3</span></span><br><span class="line">create -e /servers/host xxx4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建临时有序节点5</span></span><br><span class="line">create -e -s /servers/host xxx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建容器节点7</span></span><br><span class="line">create -c /container xxx8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建ttl节点9</span></span><br><span class="line">create -t 10 /ttl</span><br></pre></td></tr></table></figure><h4 id="2、节点状态信息"><a href="#2、节点状态信息" class="headerlink" title="2、节点状态信息"></a>2、节点状态信息</h4><p>类似于树状结构，节点下面是可以存储一些信息和属性的。可以通过stat命令来进行查看。</p><ul><li>cZxid ：Znode创建的事务id。</li><li>ctime：节点创建时的时间戳。</li><li>mZxid ：Znode被修改的事务id，即每次对znode的修改都会更新mZxid。</li></ul><p>对于zk来说，每次的变化都会产生一个唯一的事务id，zxid（ZooKeeper Transaction Id），通过zxid，可以确定更新操作的先后顺序。例如，如果zxid1小于zxid2，说明zxid1操作先于zxid2发生，zxid对于整个zk都是唯一的，即使操作的是不同的znode。</p><ul><li>pZxid: 表示该节点的子节点列表最后一次修改的事务ID，添加子节点或删除子节点就会影响子节点列表，但是修改子节点的数据内容则不影响该ID（注意: 只有子节点列表变更了才会变更pzxid，子节点内容变更不会影响pzxid ）</li><li>mtime：节点最新一次更新发生时的时间戳.</li><li>cversion ：子节点的版本号。当znode的子节点有变化时，cversion 的值就会增加1。</li><li>dataVersion：数据版本号，每次对节点进行set操作，dataVersion的值都会增加1（即使设置的是相同的数据），可有效避免了数据更新时出现的先后顺序问题。</li><li>ephemeralOwner:如果该节点为临时节点, ephemeralOwner值表示与该节点绑定的session id。如果不是，ephemeralOwner值为0(持久节点)</li><li>dataLength ： 数据的长度</li><li>numChildren ：子节点的数量（只统计直接子节点的数量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在client和server通信之前,首先需要建立连接,该连接称为session。连接建立后,如果发生连接超时、授权失败,或者显式关闭连接,连接便处于closed状态, 此时session结束。</span><br></pre></td></tr></table></figure><h4 id="3、监听机制详解"><a href="#3、监听机制详解" class="headerlink" title="3、监听机制详解"></a>3、监听机制详解</h4><h5 id="3-1临时性watch"><a href="#3-1临时性watch" class="headerlink" title="3.1临时性watch"></a>3.1临时性watch</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch机制，顾名思义是一个监听机制。Zookeeper中的watch机制，必须客户端先去服务端注册监听，这样事件发送才会触发监听，通知给客户端。</span><br></pre></td></tr></table></figure><p>监听的对象是事件，支持的事件类型如下：</p><ul><li>None: 连接建立事件</li><li>NodeCreated： 节点创建</li><li>NodeDeleted： 节点删除</li><li>NodeDataChanged：节点数据变化</li><li>NodeChildrenChanged：子节点列表变化</li><li>DataWatchRemoved：节点监听被移除</li><li>ChildWatchRemoved：子节点监听被移除</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听节点数据的变化</span></span><br><span class="line">get -w path</span><br><span class="line">stat -w path</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听子节点增减的变化</span></span><br><span class="line">ls -w path</span><br></pre></td></tr></table></figure><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>一次性触发</td><td>watch是一次性的，一旦被触发就会移除，再次使用时需要重新注册</td></tr><tr><td>客户端顺序回调</td><td>watch回调是顺序串行执行的，只有回调后客户端才能看到最新的数据状态。<br />一个watcher回调逻辑不应该太多，以免影响别的watch执行</td></tr><tr><td>轻量级</td><td>WatchEvent是最小的通信单位，结构上只包含通知状态、事件类型和节点路径，<br />并不会告诉数据节点变化前后的具体内容</td></tr><tr><td>时效性</td><td>watcher只有在当前session彻底失效时才会无效，若在session有效期内快速重连成功，<br />则watcher依然存在，仍可接收到通知；</td></tr></tbody></table><h5 id="3-2-永久性Watch"><a href="#3-2-永久性Watch" class="headerlink" title="3.2 永久性Watch"></a>3.2 永久性Watch</h5><p>在被触发之后，仍然保留，可以继续监听ZNode上的变更，是<strong>Zookeeper 3.6.0</strong>版本新增的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addWatch [-m mode] path</span><br></pre></td></tr></table></figure><p>addWatch的作用是针对指定节点添加事件监听，支持两种模式：</p><ul><li><p>PERSISTENT，持久化订阅，针对当前节点的修改和删除事件，以及当前节点的子节点的删除和新增事件。</p></li><li><p>PERSISTENT_RECURSIVE，持久化递归订阅(默认)，在PERSISTENT的基础上，增加了子节点修改的事件触发，</p><p>以及子节点的子节点的数据变化都会触发相关事件（满足递归订阅特性）</p></li></ul><h6 id="示例-协同服务"><a href="#示例-协同服务" class="headerlink" title="示例: 协同服务"></a>示例: 协同服务</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设计一个master-worker的组成员管理系统，要求系统中只能有一个master , master能实时获取系统中worker的情况。保证组里面只有一个master的设计思路。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">master1</span></span><br><span class="line">create -e /master &quot;m1:2223&quot;  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">master2</span></span><br><span class="line">create -e /master &quot;m2:2223&quot;   # /master已经存在，创建失败</span><br><span class="line">Node already exists: /master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听/master节点</span></span><br><span class="line">stat -w /master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当master2收到/master节点删除通知后可以再次发起创建节点操作</span></span><br><span class="line">create -e /master &quot;m2:2223&quot; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master-slave选举也可以用这种方式：</span><br></pre></td></tr></table></figure><p><img src="/images/zookeeper/image-20241008165335770.png" alt="image-20241008165335770"></p><p>master监控worker状态的设计思路：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">master服务</span></span><br><span class="line">create /workers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">让master服务监控/workers下的子节点</span></span><br><span class="line">ls -w /workers</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">worker1</span></span><br><span class="line">create -e /workers/w1 &quot;w1:2224&quot; #创建子节点，master服务会收到子节点变化通知</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">master服务</span></span><br><span class="line">ls -w /workers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">worker2</span></span><br><span class="line">create -e /workers/w2 &quot;w2:2224&quot;  #创建子节点，master服务会收到子节点变化通知</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">master服务</span></span><br><span class="line">ls -w /workers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">worker2</span></span><br><span class="line">quit  #worker2退出，master服务会收到子节点变化通知</span><br></pre></td></tr></table></figure><h6 id="示例：条件更新"><a href="#示例：条件更新" class="headerlink" title="示例：条件更新"></a>示例：条件更新</h6><p>设想用znode &#x2F;c实现一个counter，使用set命令来实现自增1操作。条件更新场景∶</p><ol><li>客户端1把&#x2F;c更新到版本1，实现&#x2F;c的自增1。</li><li>客户端2把&#x2F;c更新到版本2，实现&#x2F;c的自增1。</li><li>客户端1不知道&#x2F;c已经被客户端⒉更新过了，还用过时的版本1是去更新&#x2F;c，更新失败。如果客户端1使用的是无条件更新，&#x2F;c就会更新为2，没有实现自增1。</li></ol><p>使用条件更新可以避免出现客户端基于过期的数据进行数据更新的操作。</p><p><img src="/images/zookeeper/image-20241008170916756.png" alt="image-20241008170916756"></p><h4 id="4、-节点特性总结"><a href="#4、-节点特性总结" class="headerlink" title="4、 节点特性总结"></a>4、 节点特性总结</h4><ol><li><p>同一级节点 key 名称是唯一的</p></li><li><p>创建节点时，必须要带上全路径</p></li><li><p>session 关闭，临时节点清除</p></li><li><p>自动创建顺序节点</p><p><img src="/images/zookeeper/image-20241008171022966.png" alt="image-20241008171022966"></p></li><li><p>watch 机制，监听节点变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件监听机制类似于观察者模式，watch 流程是客户端向服务端某个节点路径上注册一个 watcher，同时客户端也会存储特定的 watcher，当节点数据或子节点发生变化时，服务端通知客户端，客户端进行回调处理。特别注意：-w 的监听事件被单次触发后，事件就失效了。</span><br></pre></td></tr></table></figure></li><li><p>delete 命令只能一层一层删除。提示：新版本可以通过 deleteall 命令递归删除。</p></li></ol><h4 id="5、应用场景详解"><a href="#5、应用场景详解" class="headerlink" title="5、应用场景详解"></a>5、应用场景详解</h4><p>ZooKeeper适用于存储和协同相关的关键数据，不适合用于大数据量存储。</p><p>有了上述众多节点特性，使得 zookeeper 能开发不出不同的经典应用场景，比如：</p><ul><li>注册中心</li><li>数据发布&#x2F;订阅（常用于实现配置中心）</li><li>负载均衡</li><li>命名服务</li><li>分布式协调&#x2F;通知</li><li>集群管理</li><li>Master选举</li><li>分布式锁</li><li>分布式队列</li></ul><h5 id="5-1-统一命名服务"><a href="#5-1-统一命名服务" class="headerlink" title="5.1 统一命名服务"></a>5.1 统一命名服务</h5><p>在分布式环境下，经常需要对应用&#x2F;服务进行统一命名，便于识别。</p><p>例如：IP不容易记住，而域名容易记住。</p><p><img src="/images/zookeeper/image-20241008171654251.png" alt="image-20241008171654251"></p><p>利用 ZooKeeper 顺序节点的特性，制作分布式的序列号生成器，或者叫 id 生成器。（分布式环境下使用作为数据库 id，另外一种是 UUID（缺点：没有规律）），ZooKeeper 可以生成有顺序的容易理解的同时支持分布式环境的编号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 20] ls -R /jobs</span><br><span class="line">/jobs</span><br><span class="line">/jobs/job0000000006</span><br><span class="line">/jobs/job0000000007</span><br></pre></td></tr></table></figure><h5 id="5-2-数据发布-订阅"><a href="#5-2-数据发布-订阅" class="headerlink" title="5.2 数据发布&#x2F;订阅"></a>5.2 数据发布&#x2F;订阅</h5><p>数据发布&#x2F;订阅的一个常见的场景是配置中心，发布者把数据发布到 ZooKeeper 的一个或一系列的节点上，供订阅者进行数据订阅，达到动态获取数据的目的。</p><p>配置信息一般有几个特点:</p><ol><li>数据量小的KV</li><li>数据内容在运行时会发生动态变化</li><li>集群机器共享，配置一致</li></ol><p>ZooKeeper 采用的是推拉结合的方式。</p><ol><li>推: 服务端会推给注册了监控节点的客户端 Watcher 事件通知</li><li>拉: 客户端获得通知后，然后主动到服务端拉取最新的数据</li></ol><p><img src="/images/zookeeper/image-20241008172002579.png" alt="image-20241008172002579"></p><h5 id="5-3-统一集群管理"><a href="#5-3-统一集群管理" class="headerlink" title="5.3 统一集群管理"></a>5.3 统一集群管理</h5><p>分布式环境中，实时掌握每个节点的状态是必要的，可根据节点实时状态做出一些调整。</p><p>ZooKeeper可以实现实时监控节点状态变化：</p><ul><li>可将节点信息写入ZooKeeper上的一个ZNode。</li><li>监听这个ZNode可获取它的实时状态变化。</li></ul><p><img src="/images/zookeeper/image-20241008172051917.png" alt="image-20241008172051917"></p><h5 id="5-4-负载均衡"><a href="#5-4-负载均衡" class="headerlink" title="5.4 负载均衡"></a>5.4 负载均衡</h5><p>在Zookeeper中记录每台服务器的访问数，让访问数最少的服务器去处理最新的客户端请求</p><p><img src="/images/zookeeper/image-20241008172125648.png" alt="image-20241008172125648"></p><h5 id="5-5-Master-Worker架构"><a href="#5-5-Master-Worker架构" class="headerlink" title="5.5 Master-Worker架构"></a>5.5 Master-Worker架构</h5><p>master-work是一个广泛使用的分布式架构。 master-work架构中有一个master负责监控worker的状态，并为worker分配任务。</p><ul><li>在任何时刻，系统中最多只能有一个master，不可以出现两个master的情况，多个master共存会导致脑裂。</li><li>系统中除了处于active状态的master还有一个backup master，如果active master失败了，backup master可以很快的进入active状态。</li><li>master实时监控worker的状态，能够及时收到worker成员变化的通知。master在收到worker成员变化的时候，通常重新进行任务的重新分配。</li></ul><p><img src="/images/zookeeper/image-20241008172207792.png" alt="image-20241008172207792"></p><h4 id="6、ACL权限控制"><a href="#6、ACL权限控制" class="headerlink" title="6、ACL权限控制"></a>6、ACL权限控制</h4><p>zookeeper 的 ACL（Access Control List，访问控制表）权限在生产环境是特别重要的，ACL 权限可以针对节点设置相关读写等权限，保障数据安全性。</p><p>zookeeper 的 acl 通过 [scheme:id:permissions]来构成权限列表。</p><ul><li><strong>scheme</strong>：授权的模式，代表采用的某种权限机制，包括 world、auth、digest、ip、super 几种。</li><li><strong>id</strong>：授权对象，代表允许访问的用户。如果我们选择采用 IP 方式，使用的授权对象可以是一个 IP 地址或 IP 地址段；而如果使用 Digest 或 Super 方式，则对应于一个用户名。如果是 World 模式，是授权系统中所有的用户。</li><li><strong>permissions</strong>：授权的权限，权限组合字符串，由 cdrwa 组成，其中每个字母代表支持不同权限， 创建权限 create(c)、删除权限 delete(d)、读权限 read(r)、写权限 write(w)、管理权限admin(a)。</li></ul><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>world</td><td>授权对象只有一个anyone，代表登录到服务器的所有客户端都能对该节点执行某种权限</td></tr><tr><td>ip</td><td>对连接的客户端使用IP地址认证方式进行认证</td></tr><tr><td>auth</td><td>使用以添加认证的用户进行认证</td></tr><tr><td>digest</td><td>使用 用户:密码方式验证</td></tr></tbody></table><table><thead><tr><th>权限类型</th><th>ACL简写</th><th>描述</th></tr></thead><tbody><tr><td>read</td><td>r</td><td>读取节点及显示子节点列表的权限</td></tr><tr><td>write</td><td>w</td><td>设置节点数据的权限</td></tr><tr><td>create</td><td>c</td><td>创建子节点的权限</td></tr><tr><td>delete</td><td>d</td><td>删除子节点的权限</td></tr><tr><td>admin</td><td>a</td><td>设置该节点ACL权限的权限</td></tr></tbody></table><table><thead><tr><th>授权命令</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>getAcl</td><td>getAcl path</td><td>读取节点的ACL</td></tr><tr><td>setAcl</td><td>setAcl path acl</td><td>设置节点的ACL</td></tr><tr><td>create</td><td>create path data acl</td><td>创建节点时设置acl</td></tr><tr><td>addAuth</td><td>addAuth scheme auth</td><td>添加认证用户，类似于登录操作</td></tr></tbody></table><p><strong>测试</strong>: 取消节点的读权限后，读取&#x2F;jobs节点没有权限</p><p><img src="/images/zookeeper/image-20241008174107633.png" alt="image-20241008174107633"></p><h5 id="6-1-auth授权模式"><a href="#6-1-auth授权模式" class="headerlink" title="6.1 auth授权模式"></a>6.1 auth授权模式</h5><p>创建用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addauth digest wk:123456                 # 增加一个认证用户</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一次会话（终端）可以增加多个认证用户</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setAcl /name auth:fox:123456:cdrwa</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密 生成密文密码</span></span><br><span class="line">echo -n fox:123456 | openssl dgst -binary -sha1 | openssl base64</span><br><span class="line"></span><br><span class="line">setAcl /name auth:fox:ZsWwgmtnTnx1usRF1voHFJAYGQU=:cdrwa</span><br></pre></td></tr></table></figure><p>退出客户端，重新连接之后获取&#x2F;name会没权限，需要添加授权用户。</p><h5 id="6-2-digest授权模式"><a href="#6-2-digest授权模式" class="headerlink" title="6.2 digest授权模式"></a>6.2 digest授权模式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置权限</span></span><br><span class="line">setAcl /tuling/fox digest:fox:ZsWwgmtnTnx1usRF1voHFJAYGQU=:cdrwa</span><br></pre></td></tr></table></figure><p><img src="/images/zookeeper/image-20241010173511960.png" alt="image-20241010173511960"></p><h5 id="6-3-IP授权模式"><a href="#6-3-IP授权模式" class="headerlink" title="6.3 IP授权模式"></a>6.3 IP授权模式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setAcl /node-ip ip:192.168.109.128:cdwra</span><br><span class="line">create /node-ip  data  ip:192.168.109.128:cdwra</span><br></pre></td></tr></table></figure><p>多个指定IP可以通过逗号分隔， 如 setAcl &#x2F;node-ip  ip:IP1:rw,ip:IP2:a</p><h5 id="6-4-Super-超级管理员模式"><a href="#6-4-Super-超级管理员模式" class="headerlink" title="6.4 Super 超级管理员模式"></a>6.4 Super 超级管理员模式</h5><p>这是一种特殊的Digest模式， 在Super模式下超级管理员用户可以对Zookeeper上的节点进行任何的操作。</p><p>需要在启动脚本上通过添加JVM 参数开启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">DigestAuthenticationProvider中定义</span></span><br><span class="line">-Dzookeeper.DigestAuthenticationProvider.superDigest=admin:&lt;base64encoded(SHA1(123456))</span><br></pre></td></tr></table></figure><h5 id="6-5-可插拔身份验证接口"><a href="#6-5-可插拔身份验证接口" class="headerlink" title="6.5 可插拔身份验证接口"></a>6.5 可插拔身份验证接口</h5><p>ZooKeeper提供了一种权限扩展机制来让用户实现自己的权限控制方式。</p><p>要想实现自定义的权限控制机制，需要继承接口AuthenticationProvider，用户通过该接口实现自定义的权限控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line">    <span class="comment">// 返回标识插件的字符串</span></span><br><span class="line">    String <span class="title function_">getScheme</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 将用户和验证信息关联起来</span></span><br><span class="line">    KeeperException.Code <span class="title function_">handleAuthentication</span><span class="params">(ServerCnxn cnxn, <span class="type">byte</span> authData[])</span>;</span><br><span class="line">    <span class="comment">// 验证id格式</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String id)</span>;</span><br><span class="line">    <span class="comment">// 将认证信息与ACL进行匹配看是否命中</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(String id, String aclExpr)</span>;</span><br><span class="line">    <span class="comment">// 是否授权</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-6详细解析-auth-和-digest"><a href="#6-6详细解析-auth-和-digest" class="headerlink" title="6.6详细解析 auth 和 digest"></a>6.6详细解析 auth 和 digest</h5><h6 id="6-6-1-auth"><a href="#6-6-1-auth" class="headerlink" title="6.6.1 auth"></a>6.6.1 auth</h6><p><img src="/images/zookeeper/image-20241010195517934.png" alt="image-20241010195517934"></p><p>新的会话，需要addauth之后才可以查看auth下的节点，以及setAcl （认证的哪个用户，设置哪个用户）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auth 不需要指明 <span class="built_in">id</span>     scheme:<span class="built_in">id</span>:permissions</span></span><br><span class="line">create /test2 data auth::crdwa      # 创建 node时赋予 acl</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">代表 已认证的 用户有这些权限，再认证新用户就没有这个权限了</span></span><br></pre></td></tr></table></figure><h6 id="6-6-2-digest"><a href="#6-6-2-digest" class="headerlink" title="6.6.2 digest"></a>6.6.2 digest</h6><p><img src="/images/zookeeper/image-20241010210341338.png" alt="image-20241010210341338"></p><p>注意：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密 生成密文密码</span></span><br><span class="line">echo -n wkx:123456 | openssl dgst -binary -sha1 | openssl base64</span><br><span class="line"></span><br><span class="line">B16sPINmpfpVvdPV34z4oZylfN0=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create /test6 data digest:wkx:B16sPINmpfpVvdPV34z4oZylfN0=:crdwa</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>密文密码是账密一起加密的结果。</p><h3 id="四、-Zookeeper集群架构"><a href="#四、-Zookeeper集群架构" class="headerlink" title="四、 Zookeeper集群架构"></a>四、 Zookeeper集群架构</h3><h4 id="1-集群角色"><a href="#1-集群角色" class="headerlink" title="1.集群角色"></a>1.集群角色</h4><ul><li>Leader： 领导者</li></ul><p>事务请求（写操作）的唯一调度者和处理者，保证集群事务处理的顺序性；集群内部各个服务器的调度者。对于create、setData、delete等有写操作的请求，则要统一转发给leader处理，leader需要决定编号、执行操作，这个过程称为事务。</p><ul><li>Follower: 跟随者</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">处理客户端非事务（读操作）请求（可以直接响应），转发事务请求给Leader；参与集群Leader选举投票。</span><br></pre></td></tr></table></figure><ul><li>Observer: 观察者</li></ul><p>对于非事务请求可以独立处理（读操作），对于事务性请求会转发给leader处理。Observer节点接收来自leader的inform信息，更新自己的本地存储，不参与提交和选举投票。通常在不影响集群事务处理能力的前提下提升集群的非事务处理能力。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置一个ID为3的观察者节点：</span></span><br><span class="line">server.3=192.168.0.3:2888:3888:observer</span><br></pre></td></tr></table></figure><p>Observer应用场景：</p><ul><li>提升集群的读性能。因为Observer和不参与提交和选举的投票过程，所以可以通过往集群里面添加observer节点来提高整个集群的读性能。</li><li>跨数据中心部署。 比如需要部署一个北京和香港两地都可以使用的zookeeper集群服务，并且要求北京和香港客户的读请求延迟都很低。解决方案就是把香港的节点都设置为observer。</li></ul><h4 id="2-集群架构"><a href="#2-集群架构" class="headerlink" title="2.集群架构"></a>2.集群架构</h4><p><img src="/images/zookeeper/image-20241010170936508.png" alt="image-20241010170936508"></p><p>leader节点可以处理读写请求，follower只可以处理读请求。follower在接到写请求时会把写请求转发给leader来处理。</p><p>Zookeeper数据一致性保证：</p><ul><li>全局可线性化(Linearizable )写入∶先到达leader的写请求会被先处理，leader决定写请求的执行顺序。</li><li>客户端FIFO顺序∶来自给定客户端的请求按照发送顺序执行。</li></ul><h4 id="3-集群搭建"><a href="#3-集群搭建" class="headerlink" title="3.集群搭建"></a>3.集群搭建</h4><p>环境准备：三台虚拟机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.80</span><span class="number">.110</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.80</span><span class="number">.111</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.80</span><span class="number">.112</span></span><br></pre></td></tr></table></figure><p>条件有限也可以在一台虚拟机上搭建zookeeper伪集群</p><ol><li>修改zoo.cfg配置，添加server节点配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改数据存储目录</span><br><span class="line">dataDir=/home/kay/data/zookeeper</span><br><span class="line"></span><br><span class="line">#三台虚拟机 zoo.cfg 文件末尾添加配置</span><br><span class="line">server<span class="number">.1</span>=<span class="number">192.168</span><span class="number">.80</span><span class="number">.110</span>:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">server<span class="number">.2</span>=<span class="number">192.168</span><span class="number">.80</span><span class="number">.111</span>:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">server<span class="number">.3</span>=<span class="number">192.168</span><span class="number">.80</span><span class="number">.112</span>:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure><blockquote><p>server.A&#x3D;B:C:D</p><p>A 是一个数字，表示这个是第几号服务器； 集群模式下配置一个文件 myid，这个文件在 dataDir 目录下，这个文件里面有一个数据 就是 A 的值，Zookeeper 启动时读取此文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断到底是哪个server。</p><p>B 是这个服务器的地址；</p><p>C 是这个服务器Follower与集群中的Leader服务器交换信息的端口；</p><p>D 是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口。</p></blockquote><ol start="2"><li>创建 myid 文件，配置服务器编号</li></ol><p>在dataDir对应目录下创建 myid 文件，内容为对应ip的zookeeper服务器编号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/kay/data/zookeeper</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件中添加与 server 对应的编号（注意：上下不要有空行，左右不要有空格）</span></span><br><span class="line">vim myid</span><br></pre></td></tr></table></figure><ol start="3"><li>启动zookeeper server集群</li></ol><p>启动前需要关闭防火墙(生产环境需要打开对应端口)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分别启动三个节点的zookeeper server  全部启动之后 再查看状态</span></span><br><span class="line">bin/zkServer.sh start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看集群状态</span></span><br><span class="line">bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="4、zookeeper选举原理"><a href="#4、zookeeper选举原理" class="headerlink" title="4、zookeeper选举原理"></a>4、zookeeper选举原理</h4><p><strong>第一次启动</strong></p><p><img src="/images/zookeeper/image-20241012112252895.png" alt="image-20241012112252895"></p><p><strong>非第一次启动</strong></p><p><img src="/images/zookeeper/image-20241012165255696.png" alt="image-20241012165255696"></p><h4 id="5、写数据原理"><a href="#5、写数据原理" class="headerlink" title="5、写数据原理"></a>5、写数据原理</h4><p>5.1 写流程之写入请求直接发送给Leader节点</p><p><img src="/images/zookeeper/image-20241012161813967.png" alt="image-20241012161813967"></p><p>5.2 写流程之写入请求直接发送给follower节点</p><p><img src="/images/zookeeper/image-20241012161923133.png" alt="image-20241012161923133"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%90%8E%E7%AB%AF/">后端</category>
      
      
      <category domain="http://example.com/tags/java/">java</category>
      
      <category domain="http://example.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/">中间件</category>
      
      <category domain="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</category>
      
      
      <comments>http://example.com/2024/10/16/zookeeper/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
